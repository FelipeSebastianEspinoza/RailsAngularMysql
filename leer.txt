frontend
  -> docker run -it -p 5000:5000 frontend

backend
Paso 1) Usamos el comando: 
docker-compose run --no-deps backend rails new . --api --force --database=mysql
 

Paso 2) Usamos el comando “ sudo chown -R $USER:$felipe . “ para dar permisos en el contenedor. 
Paso 3) Usamos el comando: docker-compose build
Paso 3.5) Eliminar el archivo ".git" que se crea en backend asi se pueden subir los cambios al git.
Paso 4) Copiamos el contenido del archivo database.yml o lo reemplazamos en config database.yml.
Paso 5) Usamos los comandos:
          docker-compose up  
          docker-compose run backend rake db:create (aveces este no es necesario ya que crea la bd en anterior)
          -> docker-compose up

Comandos backend:
-> docker-compose run backend bash  (abrimos el bash del backend)

Comandos rails:
rails g resource example name:string colour:string
 
 
 
docker-compose run backend bundle install
docker-compose up --build
 
docker-compose run backend rails 
 
 
 
 Otros importantes
 docker run --rm -it -v ${PWD}:/app my_app /bin/sh -c 'apt install -y nano && EDITOR=nano bin/rails credentials:edit'
 
 docker-compose run backend bash
> rails g resource example name:string colour:string
> rails db:migrate
> rails c
> > {"foo" => "green", "bar" => "red", "baz" => "purple"}.each {|n,c| Example.create!(name: n, colour: c)}
 Rebuild the application

If you make changes to the Gemfile or the 
Compose file to try out some different configurations,
you need to rebuild.
Some changes require only docker-compose up --build, but a full
rebuild requires a re-run of docker-compose run web bundle install to sync changes in the 
Gemfile.lock to the host, followed by docker-compose up --build.

Here is an example of the first case, where a full rebuild 
is not necessary. Suppose you simply want to change the 
exposed port on the local host from 3000 in our first example 
to 3001. Make the change to the Compose file to expose port 3000 
on the container through a new port, 3001, on the host, and save the changes:
